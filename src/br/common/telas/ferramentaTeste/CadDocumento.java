package br.common.telas.ferramentaTeste;

import br.org.fdte.AtualizacaoTela;
import br.org.fdte.OGrid;
import br.org.fdte.ColumnConfiguration;
import br.org.fdte.ComboBoxClasseEquivalencia;
import br.org.fdte.OGridTableModel;

import java.awt.Font;
import java.awt.Color;

// persistence test
import br.org.fdte.persistence.Atributo;
import br.org.fdte.persistence.ClasseEquivalencia;
import br.org.fdte.persistence.TemplateDocumento;

import br.org.servicos.ClasseEquivalenciaServico;
import br.org.servicos.DocumentoServico;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Vector;

import javax.swing.JOptionPane;

public class CadDocumento extends javax.swing.JPanel implements AtualizacaoTela {

    private OGrid g;
    private JFramePrincipal jFramePrincipal;
    private static CadRegras currentRegras = null;

    public CadDocumento(JFramePrincipal jFramePrincipal) {
        this.jFramePrincipal = jFramePrincipal;

        initComponents();
        initCombos();

        setBounds(200, 0, jFramePrincipal.PANEL_WIDTH, jFramePrincipal.PANEL_HEIGHT);

        // OGrid test
        g = new OGrid();
        g.setBounds(0, 80, 800, 400);
        // SEQ
        ColumnConfiguration c = new ColumnConfiguration();
        c.setTitle("id");
        c.setFieldType(ColumnConfiguration.FieldType.SEQ);
        c.setEditable(false);
        c.setWidth(20);
        g.addColumn(c);
        // TEXT
        c = new ColumnConfiguration();
        c.setTitle("Atributo");
        c.setFieldType(ColumnConfiguration.FieldType.TEXT);
        c.setWidth(100);
        c.setFont(new Font("Verdana", Font.BOLD, 12));
        c.setColor(Color.ORANGE);
        g.addColumn(c);

        // ID_TEXT_COMBO
        c = new ColumnConfiguration();
        c.setTitle("Classe");
        c.setFieldType(ColumnConfiguration.FieldType.ID_TEXT_COMBO);
        c.setcBoxDataSource(new ComboBoxClasseEquivalencia());
        c.setWidth(80);
        g.addColumn(c);

        // CHECKBOX
        c = new ColumnConfiguration();
        c.setTitle("Opcional");
        c.setFieldType(ColumnConfiguration.FieldType.CHECKBOX);
        //c.setFieldType(ColumnConfiguration.FieldType.TEXT);
        c.setWidth(60);
        g.addColumn(c);

        c = new ColumnConfiguration();
        c.setTitle("MaxOccur");
        c.setFieldType(ColumnConfiguration.FieldType.TEXT);
        c.setWidth(60);
        c.setAlignment(ColumnConfiguration.Alignment.CENTERED);
        g.addColumn(c);

        c = new ColumnConfiguration();
        c.setTitle("Comentário");
        c.setFieldType(ColumnConfiguration.FieldType.TEXT);
        c.setWidth(400);
        g.addColumn(c);

        // render table
        g.render();
        g.setVisible(true);

        add(g);

    }

    public void setRegistro(String nome) {
        //Limpar registros que estejam no grid de Atributos
        OGridTableModel tableModel = (OGridTableModel) g.getOGridTableModel();
        int nRow = tableModel.getRowCount();
        for (int i = 0; i < nRow; i++) {
            tableModel.deleteLine(i);
        }

        //initCombos();

        if (nome.equalsIgnoreCase("") == true) {
            limparRegistro();
        } else {
            popularRegistro(nome);
        }
    }

    @Override
    public void atualizarTela() {
        g.getOGridTableModel().getColumnConfiguration(2).setcBoxDataSource(new ComboBoxClasseEquivalencia());
        g.configureTableColumns();
    }

    public void setEnabledPanelFilho(boolean isEnabled) {
        if (false == isEnabled) {
            jFramePrincipal.disablePanels();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldNome = new javax.swing.JTextField();
        jComboBoxTipo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonSair = new javax.swing.JButton();
        jTextFieldClasseValidacao = new javax.swing.JTextField();
        jButtonSalvar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxTipoFisico = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jButtonRegras = new javax.swing.JButton();

        setLayout(null);
        add(jTextFieldNome);
        jTextFieldNome.setBounds(10, 30, 100, 20);

        add(jComboBoxTipo);
        jComboBoxTipo.setBounds(130, 30, 100, 20);

        jLabel1.setText("Nome");
        add(jLabel1);
        jLabel1.setBounds(10, 10, 50, 14);

        jLabel2.setText("Tipo");
        add(jLabel2);
        jLabel2.setBounds(130, 10, 40, 14);

        jButtonSair.setText("Sair");
        jButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairActionPerformed(evt);
            }
        });
        add(jButtonSair);
        jButtonSair.setBounds(730, 570, 60, 23);
        add(jTextFieldClasseValidacao);
        jTextFieldClasseValidacao.setBounds(250, 30, 100, 20);

        jButtonSalvar.setText("Salvar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });
        add(jButtonSalvar);
        jButtonSalvar.setBounds(560, 570, 70, 23);

        jLabel3.setText("Classe de Validação");
        add(jLabel3);
        jLabel3.setBounds(250, 10, 120, 14);

        add(jComboBoxTipoFisico);
        jComboBoxTipoFisico.setBounds(370, 30, 100, 20);

        jLabel4.setText("Físico");
        add(jLabel4);
        jLabel4.setBounds(370, 10, 34, 14);

        jButtonRegras.setText("Regras");
        jButtonRegras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegrasActionPerformed(evt);
            }
        });
        add(jButtonRegras);
        jButtonRegras.setBounds(640, 570, 80, 23);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairActionPerformed
        jFramePrincipal.disablePanels();
        //jFramePrincipal.setVisible(false);
    }//GEN-LAST:event_jButtonSairActionPerformed

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed
        if (validarCampos() < 0) {
            return;
        }

        boolean isNewDocument = true;
        DocumentoServico docServico = new DocumentoServico();
        //TemplateDocumento doc = docServico.getByName(jTextFieldNome.getText());

        //caso ja exista um documento
/*       if (doc != null) {
        isNewDocument = false;
        if (JOptionPane.YES_OPTION !=
        JOptionPane.showConfirmDialog(this,"Documento " + jTextFieldNome.getText() + " já existe. Deseja sobrescrevê-lo?","Sobrescrever entidade",2))
        return;
        }*/


        TemplateDocumento doc = new TemplateDocumento();
        doc.setNome(jTextFieldNome.getText());
        doc.setDirecao((String) jComboBoxTipo.getSelectedItem());
        doc.setArquivoXsd(jTextFieldClasseValidacao.getText());
        doc.setTipoFisico((String) jComboBoxTipoFisico.getSelectedItem());
        popularGridAtributo(doc);


        isNewDocument = docServico.save(doc);

        //se foi insercao de documento;
        if (isNewDocument) {
            jFramePrincipal.addNode(jTextFieldNome.getText());
            JOptionPane.showMessageDialog(this, "Documento " + jTextFieldNome.getText() + " criado");
        } else {
            JOptionPane.showMessageDialog(this, "Documento " + jTextFieldNome.getText() + " atualizado");
        }


        jFramePrincipal.atualizarCampos(entidadeDocumento);


    }//GEN-LAST:event_jButtonSalvarActionPerformed


    /*private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {

    if (validarCampos() < 0)
    return;

    boolean isNewDocument = true;
    DocumentoServico docServico = new DocumentoServico();
    TemplateDocumento doc = docServico.getByName(jTextFieldNome.getText());

    //caso ja exista um documento
    if (doc != null) {
    isNewDocument = false;
    if (JOptionPane.YES_OPTION !=
    JOptionPane.showConfirmDialog(this,"Documento " + jTextFieldNome.getText() + " já existe. Deseja sobrescrevê-lo?","Sobrescrever entidade",2))
    return;
    }else {
    doc = new TemplateDocumento();
    }



    doc.setNome(jTextFieldNome.getText());
    doc.setDirecao((String)jComboBoxTipo.getSelectedItem());
    doc.setArquivoXsd(jTextFieldClasseValidacao.getText());
    doc.setTipoFisico((String)jComboBoxTipoFisico.getSelectedItem());
    popularGridAtributo(doc);

    docServico.save(doc);


    //se foi insercao de documento;
    if (isNewDocument) {
    jFramePrincipal.addNode(jTextFieldNome.getText());
    JOptionPane.showMessageDialog(this,"Documento " + jTextFieldNome.getText() + " criado");
    }
    else {
    JOptionPane.showMessageDialog(this,"Documento " + jTextFieldNome.getText() + " atualizado");
    }


    jFramePrincipal.atualizarCampos(entidadeDocumento);
    }
     */
    private void jButtonRegrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegrasActionPerformed
        if (currentRegras == null) {
            currentRegras = new CadRegras(this);
            // jFramePrincipal.addPanel(currentRegras);
        }
        // currentRegras.setDocumento(DocumentoDAO.getDocumento(jTextFieldNome.getText()));
        currentRegras.setDocumento(new DocumentoServico().getByName(jTextFieldNome.getText()));
        setVisible(false);
        currentRegras.setVisible(true);
        jFramePrincipal.addPanel(currentRegras);
    }//GEN-LAST:event_jButtonRegrasActionPerformed

    private void popularRegistro(String nome) {
        // TemplateDocumento doc = DocumentoDAO.getDocumento(nome);
        TemplateDocumento doc = new DocumentoServico().getByName(nome);
        if (doc != null) {
            jTextFieldNome.setText(doc.getNome());
            jTextFieldNome.setEditable(false);
            jComboBoxTipo.setSelectedItem(doc.getDirecao());
            jComboBoxTipoFisico.setSelectedItem(doc.getTipoFisico());
            jTextFieldClasseValidacao.setText(doc.getArquivoXsd());

            Vector<Object> vectorAtributo = null;
            Vector<Vector> vector = new Vector();

            ArrayList<Atributo> listaAtributos = new ArrayList<Atributo>(doc.getAtributoCollection());
            Collections.sort(listaAtributos, new Comparator() {
                 @Override
                public int compare(Object obj1, Object obj2) {
                    Atributo a1 = (Atributo) obj1;
                    Atributo a2 = (Atributo) obj2;

                    if (a1.getOrderId() < a2.getOrderId()) {
                        return -1;
                    } else if (a1.getOrderId() == a2.getOrderId()) {
                        return 0;
                    } else {
                        return 1;
                    }
                }
            });


            for (Atributo atributo : listaAtributos) {
                vectorAtributo = new Vector();

                vectorAtributo.add(atributo.getOrderId());
                vectorAtributo.add(atributo.getTag());
                vectorAtributo.add(atributo.getIdClasseEquivalencia().getId());
                vectorAtributo.add(Boolean.parseBoolean(atributo.getOpcional()));
                vectorAtributo.add(atributo.getNumeroMaximoOcorrencias());

                vector.addElement(vectorAtributo);
            }
            g.fillGrid(vector);
        }
    }

    private void limparRegistro() {
        jTextFieldNome.setText("");
        jTextFieldNome.setEditable(true);
        jComboBoxTipo.setSelectedIndex(0);
        jComboBoxTipoFisico.setSelectedIndex(0);
        jTextFieldClasseValidacao.setText("");
    }

    private void popularGridAtributo(TemplateDocumento doc) {

        //conjunto de atributos a serem salvos
        List<Atributo> atributos = new ArrayList();

        //conjunto que representa uma linha do grid de atributos
        List<Object> linha = new ArrayList(6);

        //itera sobre todas as linha do grid
        for (int index = 0; index < g.getGridData().size(); index++) {

            //cada linha encontrada no grid temos os dados que representarao
            //um objeto Atributo
            Atributo atributo = new Atributo();

            //garante-se que cada linha tenha 6 objetos
            linha.clear();
            for (int i = 0; i < 6; i++) {
                linha.add(i, null);
            }

            for (int indexC = 0; indexC < g.getGridData().get(index).size(); indexC++) {
                linha.set(indexC, g.getGridData().get(index).get(indexC));
            }

            if (g.getGridData().get(index).get(0) != null) {
                atributo.setOrderId(Long.parseLong(linha.get(0).toString()));
            }

            if (linha.get(1) != null) {
                atributo.setTag((String) linha.get(1));
            }

            if (linha.get(2) != null) {
                ClasseEquivalencia ce = new ClasseEquivalenciaServico().getById(((Long) linha.get(2)).intValue());
                // atributo.setIdClasseEquivalencia(ClasseEquivalenciaDAO.getClasseEquivalencia(((Long)linha.get(2)).intValue()));
                atributo.setIdClasseEquivalencia(ce);
            }


            if (linha.get(3) == null) {
                atributo.setOpcional("false");
            } else {
                atributo.setOpcional(Boolean.toString((Boolean) linha.get(3)));
            }

            if (linha.get(4) != null) {
                atributo.setNumeroMaximoOcorrencias(Integer.parseInt(linha.get(4).toString()));
            } else {
                atributo.setNumeroMaximoOcorrencias(0);
            }

            atributo.setIdTemplateDocumento(doc);

            //o atributo é adicionado na lista atributos a ser processada ao final desse método
            atributos.add(atributo);
        }

        //salvo cada objeto de Atributo encontrado la lista atributos
       /*for (int i = 0; i<atributos.size(); i++) {
        try {
        AtributoDAO.save(atributos.get(i));
        }
        catch(Exception e) {
        JOptionPane.showMessageDialog(this,"Erro ao Salvar Atributo");
        }
        }*/
        doc.setAtributoCollection(atributos);
    }

    private void initCombos() {
        jComboBoxTipo.removeAllItems();
        jComboBoxTipo.addItem("");
        jComboBoxTipo.addItem("Entrada");
        jComboBoxTipo.addItem("Saida");

        jComboBoxTipoFisico.removeAllItems();
        jComboBoxTipoFisico.addItem("");
        jComboBoxTipoFisico.addItem("arquivo");
        jComboBoxTipoFisico.addItem("mensagem");
    }

    private int validarCampos() {
        int retorno = 0;
        if (jTextFieldNome.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Escolha um nome");
            retorno = -1;
        }
        if (jComboBoxTipo.getSelectedItem() == null || jComboBoxTipo.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Escolha um tipo");
            retorno = -1;
        }
        if (jComboBoxTipoFisico.getSelectedItem() == null || jComboBoxTipoFisico.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Escolha um tipo físico");
            retorno = -1;
        }
        return retorno;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonRegras;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JComboBox jComboBoxTipo;
    private javax.swing.JComboBox jComboBoxTipoFisico;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextFieldClasseValidacao;
    private javax.swing.JTextField jTextFieldNome;
    // End of variables declaration//GEN-END:variables
}
