package br.common.telas.ferramentaTeste;

import java.awt.Color;
import java.awt.Font;
import java.util.List;
import java.util.Vector;

import javax.swing.JOptionPane;

import br.org.fdte.AtualizacaoTela;
import br.org.fdte.ColumnConfiguration;
import br.org.fdte.OGrid;
import br.org.fdte.OGridTableModel;
import br.org.fdte.dao.TipoClasseEquivalenciaDAO;
import br.org.fdte.persistence.ClasseEquivalencia;
import br.org.fdte.persistence.TipoClasseEquivalencia;
import br.org.fdte.persistence.Valor;
import br.org.servicos.ClasseEquivalenciaServico;

public class CadClassEquivalencia extends javax.swing.JPanel implements AtualizacaoTela {

    private OGrid g;
    private JFramePrincipal jFramePrincipal;

    public CadClassEquivalencia(JFramePrincipal jFramePrincipal) {
        this.jFramePrincipal = jFramePrincipal;

        initComponents();
        initCombos();

        setBounds(200, 0, jFramePrincipal.PANEL_WIDTH, jFramePrincipal.PANEL_HEIGHT);
        // OGrid test
        g = new OGrid();
        //g.setBounds(0, 80, 1000, 400);
        g.setBounds(0, 80, 800, 400);
        // SEQ
        ColumnConfiguration c = new ColumnConfiguration();
        c.setTitle("id");
        c.setFieldType(ColumnConfiguration.FieldType.SEQ);
        c.setEditable(false);
        c.setWidth(20);
        g.addColumn(c);
        // TEXT
        c = new ColumnConfiguration();
        c.setTitle("Valor");
        c.setFieldType(ColumnConfiguration.FieldType.TEXT);
        c.setWidth(300);
        c.setFont(new Font("Verdana", Font.BOLD, 12));
        c.setColor(Color.ORANGE);
        g.addColumn(c);

        // CHECKBOX
        c = new ColumnConfiguration();
        c.setTitle("Positivo");
        c.setFieldType(ColumnConfiguration.FieldType.CHECKBOX);
        c.setWidth(100);
        g.addColumn(c);

        c = new ColumnConfiguration();
        c.setTitle("Comentário");
        c.setFieldType(ColumnConfiguration.FieldType.TEXT);
        c.setWidth(400);
        g.addColumn(c);

        // render table
        g.render();
        g.setVisible(true);

        add(g);
    }

    public void setRegistro(String nome) {

        //Limpar registros que estejam no grid de Valores
        OGridTableModel tableModel = (OGridTableModel) g.getOGridTableModel();
        int nRow = tableModel.getRowCount();
        for (int i = 0; i < nRow; i++) {
            tableModel.deleteLine(i);
        }

        if (nome.equalsIgnoreCase("") == true) {
            limparRegistro();
        } else {
            popularRegistro(nome);
        }
    }

    @Override
    public void atualizarTela() {
        /* jcmbHeranca.removeAllItems();
        jcmbHeranca.addItem("");
        //List<ClasseEquivalencia> lstCE = ClasseEquivalenciaDAO.getAll();
        List<ClasseEquivalencia> lstCE = new ClasseEquivalenciaServico().getAll();
        for (ClasseEquivalencia ce : lstCE) {
        jcmbHeranca.addItem(ce.getNome());
        }*/
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldNome = new javax.swing.JTextField();
        jButtonSalvar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBoxTipo = new javax.swing.JComboBox();
        jcmbHeranca = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setLayout(null);

        jLabel1.setText("Nome");
        add(jLabel1);
        jLabel1.setBounds(10, 10, 40, 14);

        jTextFieldNome.setPreferredSize(new java.awt.Dimension(50, 20));
        add(jTextFieldNome);
        jTextFieldNome.setBounds(10, 30, 100, 20);

        jButtonSalvar.setText("Salvar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });
        add(jButtonSalvar);
        jButtonSalvar.setBounds(650, 560, 70, 23);

        jButton2.setText("Sair");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2);
        jButton2.setBounds(730, 560, 60, 23);

        add(jComboBoxTipo);
        jComboBoxTipo.setBounds(130, 30, 100, 20);

        jcmbHeranca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmbHerancaActionPerformed(evt);
            }
        });
        add(jcmbHeranca);
        jcmbHeranca.setBounds(260, 30, 100, 20);

        jLabel2.setText("Tipo");
        add(jLabel2);
        jLabel2.setBounds(130, 10, 30, 14);

        jLabel3.setText("Herança");
        add(jLabel3);
        jLabel3.setBounds(260, 10, 50, 14);

        jLabel4.setText("Valores");
        add(jLabel4);
        jLabel4.setBounds(10, 70, 50, 14);

        getAccessibleContext().setAccessibleParent(this);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed

        if (validarCampos() < 0) {
            return;
        }

        TipoClasseEquivalencia tipoCe =
                TipoClasseEquivalenciaDAO.getTipoClasseEquivalencia((String) jComboBoxTipo.getSelectedItem());

        ClasseEquivalenciaServico servicoClasseEq = new ClasseEquivalenciaServico();
        ClasseEquivalencia ce = new ClasseEquivalencia();
        ce.setNome(jTextFieldNome.getText());
        ce.setTipo(tipoCe);        
        popularGridValores(ce);

        boolean isNewDocument  = servicoClasseEq.save(ce);

        //se foi insercao;
       if (isNewDocument) {
           jFramePrincipal.addNode(jTextFieldNome.getText());
           JOptionPane.showMessageDialog(this,"Classe de Equivalencia " + jTextFieldNome.getText() + " criada");
       }
       else {
           JOptionPane.showMessageDialog(this, "Classe de Equivalencia " + jTextFieldNome.getText() + " atualizada");
       }


        jFramePrincipal.atualizarCampos(AtualizacaoTela.entidadeClasseEquivalencia);
        
    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jFramePrincipal.disablePanels();
        //setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jcmbHerancaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmbHerancaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcmbHerancaActionPerformed

    private int validarCampos() {

        int retorno = 0;

        if (jTextFieldNome.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Escolha um nome");
            retorno = -1;
        }

        if (jComboBoxTipo.getSelectedItem() == null || jComboBoxTipo.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Escolha um tipo");
            retorno = -1;
        }
        return retorno;
    }

    private void popularGridValores(ClasseEquivalencia ce) {

        Vector<Valor> valores = new Vector();
        Vector<Vector> dataGrid = g.getGridData();
        Vector<Object> vector = new Vector(4);

        for (int index = 0; index < dataGrid.size(); index++) {
            vector.clear();
            for (int i = 0; i < 4; i++) {
                vector.add(i, null);
            }
            Valor valor = new Valor();

            for (int indexC = 0; indexC < dataGrid.get(index).size(); indexC++) {
                vector.set(indexC, dataGrid.get(index).get(indexC));
            }

            if (vector.get(0) != null) {
                valor.setOrderId(Long.parseLong(vector.get(0).toString()));
            }

            if (vector.get(1) != null) {
                valor.setValor((String) vector.get(1));
            }

            if (vector.get(2) == null) {
                valor.setPositivoNegativo("N");
            } else {
                Boolean positivo = (Boolean) vector.get(2);
                valor.setPositivoNegativo(positivo == true ? "P" : "N");
            }

            valor.setComentario((String) vector.get(3));
            valor.setIdClasseEquivalencia(ce);

            valores.add(valor);
        }
/*        for (int i = 0; i < valores.size(); i++) {
            ValorDAO.save(valores.get(i));

        }*/
        ce.setValorCollection(valores);
    }

    private void popularRegistro(String nome) {
        ClasseEquivalencia ce = new ClasseEquivalenciaServico().getByName(nome);

        if (ce != null) {
            jTextFieldNome.setText(ce.getNome());
            jTextFieldNome.setEditable(false);
            jComboBoxTipo.setSelectedItem(ce.getTipo().getTipoClasseEquivalencia());

            if (ce.getHeranca() != null) {
                jcmbHeranca.setSelectedItem(ce.getHeranca().getNome());
            }

            Vector<Object> vectorValor = null;
            Vector<Vector> vector = new Vector();

            for (Valor val : ce.getValorCollection()) {
                Boolean positivo = false;
                if ((val.getPositivoNegativo() != null) && (val.getPositivoNegativo().equals("P"))) {
                    positivo = true;
                }

                vectorValor = new Vector();
                vectorValor.add(val.getOrderId().toString());

                if (val.getValor() == null) {
                    vectorValor.add("");
                } else {
                    vectorValor.add(val.getValor());
                }

                vectorValor.add(positivo);

                if (val.getComentario() == null) {
                    vectorValor.add("");
                } else {
                    vectorValor.add(val.getComentario());
                }

                vector.addElement(vectorValor);
            }
            g.fillGrid(vector);
        }
    }

    private void limparRegistro() {
        jTextFieldNome.setText("");
        jTextFieldNome.setEditable(true);
        jComboBoxTipo.setSelectedIndex(0);
        jcmbHeranca.setSelectedIndex(0);
    }

    private void initCombos() {
        jcmbHeranca.addItem("");
        List<TipoClasseEquivalencia> lst = TipoClasseEquivalenciaDAO.getAll();
        for (TipoClasseEquivalencia s : lst) {
            jComboBoxTipo.addItem(s.getTipoClasseEquivalencia());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JComboBox jComboBoxTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextFieldNome;
    private javax.swing.JComboBox jcmbHeranca;
    // End of variables declaration//GEN-END:variables
}
